name: Build
on:
  workflow_dispatch:
defaults:
  run:
    shell: bash
jobs:
  get-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Create Version
      id: create-version
      run: |
        latest_tag=$(git tag -l | tail -1)
        version=$(echo "${latest_tag:1}")
        echo "version=$version" >> $GITHUB_OUTPUT
    outputs:
      version: ${{ steps.create-version.outputs.version }}

  define-matrix:
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.targets.outputs.environments }}
    steps:
      - name: Define Target Environment
        id: targets
        run: |
          echo 'environments=["dev"]' >> $GITHUB_OUTPUT

  build-image:
    needs: [get-version,define-matrix]
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    strategy:
      matrix:
        environment: ${{ fromJSON(needs.define-matrix.outputs.environments) }}
    environment: ${{ matrix.environment }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
    - name: Create Foo
      id: create-foo
      run: |
        echo "Foo" > foo.txt
    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        platform: |
          - linux/amd64
          - linux/arm64
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ needs.setup.outputs.version }}
          TARGET_ENVIRONMENT=${{ matrix.environment }}
          FILE_NAME=foo.txt
        secrets: |
          "secret_1=Foo"
          "secret_2=Bar"
    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
        subject-digest: ${{ steps.push.outputs.digest }}
        push-to-registry: true
