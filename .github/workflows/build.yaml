name: Build
on:
  workflow_dispatch:
defaults:
  run:
    shell: bash
jobs:
  get-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Create Version
      id: create-version
      run: |
        latest_tag=$(git tag -l | tail -1)
        version=$(echo "${latest_tag:1}")
        echo "version=$version" >> $GITHUB_OUTPUT
    outputs:
      version: ${{ steps.create-version.outputs.version }}

  define-matrix:
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.targets.outputs.environments }}
    steps:
      - name: Define Target Environment
        id: targets
        run: |
          echo 'environments=["dev"]' >> $GITHUB_OUTPUT

  build-image:
    needs: [get-version,define-matrix]
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    strategy:
      matrix:
        environment: ${{ fromJSON(needs.define-matrix.outputs.environments) }}
    environment: ${{ matrix.environment }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
    - name: Create Foo
      id: create-foo
      run: |
        echo "Foo" > foo.txt
    - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
    - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.setup.outputs.version }}
            TARGET_ENVIRONMENT=${{ matrix.environment }}
            FILE_NAME=foo.txt
    - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
